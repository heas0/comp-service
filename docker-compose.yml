version: "3.9"

services:
    db:
        image: postgres:16-alpine
        container_name: compservice_db
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-compservice}
            POSTGRES_USER: ${POSTGRES_USER:-compservice}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me}
        volumes:
            - db_data:/var/lib/postgresql/data
        healthcheck:
            test:
                ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
            interval: 5s
            timeout: 3s
            retries: 10
        restart: unless-stopped

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: compservice_backend
        environment:
            NODE_ENV: production
            PORT: 5000
            # DATABASE_URL формируется с использованием сервиса db
            DATABASE_URL: postgres://${POSTGRES_USER:-compservice}:${POSTGRES_PASSWORD:-change_me}@db:5432/${POSTGRES_DB:-compservice}
            JWT_SECRET: ${JWT_SECRET:-please_change_me}
            # Опционально: создать администратора при старте (если заданы)
            ADMIN_USERNAME: ${ADMIN_USERNAME:-}
            ADMIN_PASSWORD: ${ADMIN_PASSWORD:-}
        depends_on:
            db:
                condition: service_healthy
        ports:
            - "5000:5000" # optional: expose for local debug
        healthcheck:
            test:
                [
                    "CMD",
                    "node",
                    "-e",
                    "require('http').get('http://localhost:5000', res => process.exit(res.statusCode===404?0:0)).on('error', ()=>process.exit(1))",
                ]
            interval: 10s
            timeout: 3s
            retries: 10
        restart: unless-stopped
        command: sh -c "node scripts/apply-schema.js && node scripts/seed-user.js || true; node server.js"

    web:
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                VITE_API_URL: /api
        container_name: compservice_web
        depends_on:
            - backend
        ports:
            - "80:80"
        restart: unless-stopped

volumes:
    db_data:
